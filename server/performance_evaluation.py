import time
import threading
import pandas as pd
from sklearn.metrics import confusion_matrix, accuracy_score
from . import socketio

# Performance Evaluation and Logging
def evaluate_performance(actual_signals, predicted_signals):
    """
    Save model performance metrics such as confusion matrix and accuracy to a file.
    Also emit the performance data to the frontend for real-time visualization.
    """
    # Calculate confusion matrix and accuracy
    cm = confusion_matrix(actual_signals, predicted_signals)
    accuracy = accuracy_score(actual_signals, predicted_signals)

    # Log performance to a file
    with open('/models/performance_logs.txt', 'a') as f:
        f.write(f"\nConfusion Matrix:\n{cm}")
        f.write(f"\nAccuracy: {accuracy:.2f}\n")
        f.write(f"Logged at: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 40 + "\n")

    print(f"Performance saved. Accuracy: {accuracy:.2f}")

    # Emit the performance data to the frontend for plotting
    socketio.emit('update_performance', {
        'accuracy': accuracy,
        'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
    })

def save_actual_signals(signals):
    """
    Save actual signals to a CSV file.
    """
    df = pd.DataFrame({'signal': signals})
    df.to_csv('/models/actual_signals.csv', index=False)
    print("Actual signals saved to actual_signals.csv")

def save_predicted_signals(signals):
    """
    Save predicted signals to a CSV file.
    """
    df = pd.DataFrame({'signal': signals})
    df.to_csv('/models/predicted_signals.csv', index=False)
    print("Predicted signals saved to predicted_signals.csv")

# Function to get actual signals from the CSV file
def get_actual_signals():
    """
    This function reads the 'actual_signals.csv' file, which should store the actual signals 
    (e.g., Buy, Sell) generated by the system for evaluation.
    """
    try:
        df_actual = pd.read_csv('/models/actual_signals.csv')
        actual_signals = df_actual['signal'].tolist()
        return actual_signals
    except FileNotFoundError:
        print("Actual signals file not found.")
        return []

# Function to get predicted signals from the CSV file
def get_predicted_signals():
    """
    This function reads the 'predicted_signals.csv' file, which should store the predicted signals 
    (e.g., Buy, Sell) generated by the LSTM model.
    """
    try:
        df_predicted = pd.read_csv('/models/predicted_signals.csv')
        predicted_signals = df_predicted['signal'].tolist()
        return predicted_signals
    except FileNotFoundError:
        print("Predicted signals file not found.")
        return []

# Periodic saving every 12 hours
def save_performance_periodically():
    while True:
        print("Starting performance evaluation...")
        actual_signals = get_actual_signals()
        predicted_signals = get_predicted_signals()
        evaluate_performance(actual_signals, predicted_signals)
        time.sleep(12 * 60 * 60)  # 12 hours

# Start the periodic saving in a separate thread
def start_background_performance_saving():
    performance_thread = threading.Thread(target=save_performance_periodically, daemon=True)
    performance_thread.start()
